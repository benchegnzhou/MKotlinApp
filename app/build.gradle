apply plugin: 'com.android.application'


apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-noarg'
apply plugin: 'kotlin-allopen'
//解决Android中findviewById的插件
apply plugin: 'kotlin-android-extensions'



//通用配置引入
apply from: '../commonConfig.gradle'


noArg {
    annotation("zbc.com.cn.annotations.Poko")
}
allOpen {
    annotation("zbc.com.cn.annotations.Poko")
}


kotlin {
    experimental{
        coroutines 'enable'
    }
    androidExtensions {
        experimental = true
    }
}



//    mainClassName = 'com.zbc..MiniCalculatorKt'
android {
    compileSdkVersion android.compileSdkVersion
    defaultConfig {
        applicationId "zbc.com.cn"
        minSdkVersion android.minSdkVersion
        targetSdkVersion android.targetSdkVersion
        versionCode android.versionCode
        versionName android.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //方法过多google提供的分包解决方案   参考 https://yq.aliyun.com/articles/12429   和  http://blog.csdn.net/gulihui890411/article/details/48551551
    implementation dependenciesLib.multidex
    //添加Kotlin 标准库
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0'


    //==========================网络请求全家桶======================
    implementation "io.reactivex.rxjava2:rxjava:2.2.2" // 必要rxjava2依赖
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0" // 必要rxandrroid依赖，切线程时需要用到
    implementation 'com.squareup.retrofit2:retrofit:2.9.0' // 必要retrofit依赖
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.9.0' // 必要依赖，和Rxjava结合必须用到，下面会提到
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0' // 必要依赖，解析json字符所用
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'
    //非必要依赖， log依赖，如果需要打印OkHttpLog需要添加

    implementation dependenciesLib.gson
    implementation project(':mvp')
    implementation project(':commonutils')
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'com.orhanobut:logger:2.2.0'


    implementation 'com.google.android.material:material:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:1.0.0'
//
//    api "org.jetbrains.anko:anko-commons:$anko_version"
////    api "org.jetbrains.anko:anko:$anko_version"
//    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
//    api "org.jetbrains.anko:anko-sdk27:$anko_version"
//    api "org.jetbrains.anko:anko-design:$anko_version"
//    api "org.jetbrains.anko:anko-constraint-layout:$anko_version"
//    api "org.jetbrains.anko:anko-sdk15-listeners:$anko_version"
    implementation("org.jetbrains.anko:anko:$anko_version") {
        exclude module: 'support-v4'
    }



//    // Anko全家桶 包含以下所有
//    implementation "org.jetbrains.anko:anko:$anko_version"
//
//    // Anko Commons
//    implementation "org.jetbrains.anko:anko-commons:$anko_version"
//
//    // Anko Layouts
//    implementation "org.jetbrains.anko:anko-sdk25:$anko_version" // sdk15, sdk19, sdk21, sdk23 are also available
//    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
//
//    // Coroutine listeners for Anko Layouts
//    implementation "org.jetbrains.anko:anko-sdk25-coroutines:$anko_version"
//    implementation "org.jetbrains.anko:anko-appcompat-v7-coroutines:$anko_version"
//
//    // Anko SQLite
//    implementation "org.jetbrains.anko:anko-sqlite:$anko_version"

    implementation 'com.bennyhuo.tieguanyin:tieguanyin-runtime:1.0-beta'
    implementation 'com.bennyhuo.tieguanyin:tieguanyin-annotations:1.0-beta'
    kapt 'com.bennyhuo.tieguanyin:tieguanyin-compiler:1.0-beta'

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"


    implementation 'com.google.dagger:dagger:2.28.3'
    kapt 'com.google.dagger:dagger-compiler:2.28.3'

    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    //这个库里面包含协程的启动等待等基本操作
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-swing:1.3.9"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9"
    //    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:1.3.8"

    implementation "com.github.bumptech.glide:glide:4.11.0"
    //    如果你在 Kotlin 编写的类里使用 Glide 注解，你需要引入一个 kapt 依赖，以代替常规的 annotationProcessor 依赖：
    kapt 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'com.zzhoujay.richtext:richtext:3.0.8'

    implementation 'cn.carbs.android:AvatarImageView:1.0.4'

    implementation 'androidx.appcompat:appcompat:1.0.0'                 //必须 1.0.0 以上

    implementation  'com.scwang.smart:refresh-layout-kernel:2.0.1'      //核心必须依赖
    implementation  'com.scwang.smart:refresh-header-classics:2.0.1'    //经典刷新头
    implementation  'com.scwang.smart:refresh-header-radar:2.0.1'       //雷达刷新头
    implementation  'com.scwang.smart:refresh-header-falsify:2.0.1'     //虚拟刷新头
    implementation  'com.scwang.smart:refresh-header-material:2.0.1'    //谷歌刷新头
    implementation  'com.scwang.smart:refresh-header-two-level:2.0.1'   //二级刷新头
    implementation  'com.scwang.smart:refresh-footer-ball:2.0.1'        //球脉冲加载
    implementation  'com.scwang.smart:refresh-footer-classics:2.0.1'    //经典加载

}
